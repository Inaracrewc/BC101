// SPDX-License-Identifier: MIT //0Ô∏è‚É£
pragma solidity 0.8.1;//1Ô∏è‚É£

// Import Statements //2Ô∏è‚É£
import "@openzeppelin/contracts/utils/Strings.sol";//3Ô∏è‚É£ a)
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";//3Ô∏è‚É£ b)
import "@openzeppelin/contracts/utils/Counters.sol";//3Ô∏è‚É£ c)
import "hardhat/console.sol";//3Ô∏è‚É£ d)

// We need to import the helper functions from the contract that we copy/pasted. 
import { Base64 } from "./libraries/Base64.sol";//3Ô∏è‚É£ e)

contract MyFirstCollectible is ERC721URIStorage {//4Ô∏è‚É£
  using Counters for Counters.Counter;//5Ô∏è‚É£a)
  Counters.Counter private _tokenIds; //5Ô∏è‚É£b)

  string baseSvg = "<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 350 350'><style>.base { fill: white; font-family: monospace; font-size: 30px; }</style><rect width='100%' height='100%' fill='black' /><text x='50%' y='50%' class='base' dominant-baseline='middle' text-anchor='middle'>";//6Ô∏è‚É£

  string[] firstWords = ["Peace", "Doggy", "Foggy", "Cats", "Less", "Cute"];
  string[] secondWords = ["are", "will be", "can be", "should be", "perhaps", "never"];
  string[] thirdWords = ["insane", "fluffy", "cute", "great", "past", "worthless"];//7Ô∏è‚É£

  constructor() ERC721 ("MyFirstCollectible", "COLLECTIBLE") {//8Ô∏è‚É£
    console.log("This is my NFT contract. Woah!");//üñ®
  }

  function pickRandomFirstWord(uint256 tokenId) public view returns (string memory) {//9Ô∏è‚É£a)
    uint256 rand = random(string(abi.encodePacked("FIRST_WORD", Strings.toString(tokenId))));//9Ô∏è‚É£b)
    //console.log("Strings.toString(tokenId ", Strings.toString(tokenId));
    //console.log("rand before: ", rand);
    rand = rand % firstWords.length;//9Ô∏è‚É£c)
    //console.log("rand after: ", rand);
    return firstWords[rand];//9Ô∏è‚É£d)
  }//9Ô∏è‚É£

  function pickRandomSecondWord(uint256 tokenId) public view returns (string memory) {
    uint256 rand = random(string(abi.encodePacked("SECOND_WORD", Strings.toString(tokenId))));
    rand = rand % secondWords.length;
    return secondWords[rand];
  }

  function pickRandomThirdWord(uint256 tokenId) public view returns (string memory) {
    uint256 rand = random(string(abi.encodePacked("THIRD_WORD", Strings.toString(tokenId))));
    rand = rand % thirdWords.length;
    return thirdWords[rand];
  }

  function random(string memory input) internal pure returns (uint256) {
      return uint256(keccak256(abi.encodePacked(input)));
  }//1Ô∏è‚É£0Ô∏è‚É£

  function mintNFT() public {//1Ô∏è‚É£1Ô∏è‚É£ a)
    uint256 newItemId = _tokenIds.current();//1Ô∏è‚É£1Ô∏è‚É£ b)

    string memory first = pickRandomFirstWord(newItemId);
    string memory second = pickRandomSecondWord(newItemId);
    string memory third = pickRandomThirdWord(newItemId);
    string memory combinedWord = string(abi.encodePacked(first, " ", second, " ", third, "."));//1Ô∏è‚É£1Ô∏è‚É£ c)
    //console.log("combinedWord: ", combinedWord);

    string memory finalSvg = string(abi.encodePacked(baseSvg, combinedWord, "</text></svg>"));//1Ô∏è‚É£1Ô∏è‚É£ d)

    // Get all the JSON metadata in place and base64 encode it.
    string memory json = Base64.encode(
        bytes(
            string(
                abi.encodePacked(
                    '{"name": "',
                    // We set the title of our NFT as the generated word.
                    combinedWord,
                    '", "description": "My first collectible.", "image": "data:image/svg+xml;base64,',
                    // We add data:image/svg+xml;base64 and then append our base64 encode our svg.
                    Base64.encode(bytes(finalSvg)),
                    '"}'
                )
            )
        )
    );//1Ô∏è‚É£1Ô∏è‚É£ e)

    // Just like before, we prepend data:application/json;base64, to our data.
    string memory finalTokenUri = string(
        abi.encodePacked("data:application/json;base64,", json)
    );//1Ô∏è‚É£1Ô∏è‚É£ f)

    console.log("\n----START COPY AFTER --------------------");//üñ®
    console.log(finalTokenUri);//üñ®
    console.log("----END COPY ----------------------------\n");//üñ®

    _safeMint(msg.sender, newItemId);//1Ô∏è‚É£1Ô∏è‚É£ g)
    
    // Update your URI!!!
    _setTokenURI(newItemId, finalTokenUri);//1Ô∏è‚É£1Ô∏è‚É£ h)
  
    _tokenIds.increment();//1Ô∏è‚É£1Ô∏è‚É£ i)
    console.log("An NFT w/ ID %s has been minted to %s", newItemId, msg.sender);//üñ®
  }
}
